// scripts/test-indexes.js
// Script para testar os √≠ndices do modelo Desligado

const mongoose = require('mongoose');
const Desligado = require('../src/models/Desligado');

async function testIndexes() {
  console.log('üîç Testando √≠ndices do modelo Desligado...\n');

  try {
    // Conectar ao MongoDB (se necess√°rio para verificar √≠ndices)
    // await mongoose.connect('mongodb://localhost:27017/test');

    // Verificar √≠ndices definidos no schema
    const indexes = Desligado.schema.indexes();
    
    console.log('üìã √çndices definidos no schema:');
    indexes.forEach((index, i) => {
      const fields = Object.keys(index[0]).map(key => {
        const direction = index[0][key] === 1 ? 'ASC' : 'DESC';
        return `${key} (${direction})`;
      }).join(', ');
      
      const options = index[1] || {};
      const optionsStr = Object.keys(options).length > 0 ? 
        ` - Op√ß√µes: ${JSON.stringify(options)}` : '';
      
      console.log(`  ${i + 1}. ${fields}${optionsStr}`);
    });

    console.log('');

    // Testar se o plugin de pagina√ß√£o foi aplicado
    console.log('üìÑ Testando plugin de pagina√ß√£o...');
    
    if (typeof Desligado.paginate === 'function') {
      console.log('‚úÖ Plugin de pagina√ß√£o est√° dispon√≠vel');
      
      // Testar configura√ß√£o b√°sica da pagina√ß√£o
      const testOptions = {
        page: 1,
        limit: 10,
        sort: { dataInclusao: -1 }
      };
      
      console.log('‚úÖ Op√ß√µes de pagina√ß√£o v√°lidas:', JSON.stringify(testOptions));
    } else {
      console.log('‚ùå Plugin de pagina√ß√£o N√ÉO est√° dispon√≠vel');
    }

    console.log('');

    // Verificar campos √∫nicos
    console.log('üîë Verificando campos √∫nicos...');
    const schemaType = Desligado.schema.path('idContratado');
    
    if (schemaType) {
      console.log('‚úÖ Campo idContratado encontrado');
      
      // Verificar se tem √≠ndice √∫nico definido explicitamente
      const hasUniqueIndex = indexes.some(index => 
        index[0].idContratado && index[1] && index[1].unique
      );
      
      if (hasUniqueIndex) {
        console.log('‚úÖ √çndice √∫nico para idContratado definido corretamente');
      } else {
        console.log('‚ö†Ô∏è  √çndice √∫nico para idContratado n√£o encontrado - ser√° criado automaticamente');
      }
    }

    console.log('');
    console.log('üéâ Teste de √≠ndices conclu√≠do com sucesso!');
    console.log('');
    console.log('üìù Resumo dos √≠ndices otimizados:');
    console.log('- ‚úÖ idContratado (√∫nico) - Para evitar duplicatas');
    console.log('- ‚úÖ nomeCompleto - Para busca por nome');
    console.log('- ‚úÖ dataInclusao (DESC) - Para ordena√ß√£o cronol√≥gica');
    console.log('- ‚úÖ cargo - Para filtros por posi√ß√£o');
    console.log('- ‚úÖ centroCusto - Para filtros por setor');
    console.log('- ‚úÖ razaoSocialEmpresa + centroCusto - √çndice composto para consultas avan√ßadas');

  } catch (error) {
    console.error('‚ùå Erro no teste de √≠ndices:', error.message);
  }
}

// Executar teste se o script for chamado diretamente
if (require.main === module) {
  testIndexes();
}

module.exports = { testIndexes };
