// src/middlewares/authMiddleware.js
const AuthService = require('./auth');

/**
 * Middleware de autentica√ß√£o
 * Verifica se o token de autoriza√ß√£o est√° presente e v√°lido
 */
async function authMiddleware(req, res, next) {
  try {
    const authHeader = req.headers.authorization;
    
    console.log(`üîê Verificando autentica√ß√£o...`);
    console.log('üîê Headers de autoriza√ß√£o:', authHeader ? 'Present' : 'Missing');
    console.debug(`Debugg - Verificando autentica√ß√£o... ${authHeader}`);
    

    if (!authHeader) {
      console.log('‚ùå Token de autoriza√ß√£o ausente');
      return res.status(401).json({
        success: false,
        message: 'Token de autoriza√ß√£o √© obrigat√≥rio'
      });
    }

    // Extrair o token do header "Bearer TOKEN"
    const token = authHeader.split(' ')[1];
    
    if (!token) {
      console.log('‚ùå Formato de token inv√°lido');
      return res.status(401).json({
        success: false,
        message: 'Token de autoriza√ß√£o inv√°lido'
      });
    }

    console.log('üîê Token extra√≠do, validando...');
    
    // Verificar se o token √© v√°lido
    const userDetails = await AuthService.detalhesUsuarioLogado(token);
    
    console.log('‚úÖ Token v√°lido, usu√°rio autenticado:', userDetails.email || userDetails.username || 'ID: ' + userDetails.id);
    
    // Adicionar os detalhes do usu√°rio √† requisi√ß√£o
    req.user = userDetails;
    
    next();
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error.message);
    
    // Verificar se √© erro espec√≠fico de token inv√°lido
    if (error.message.includes('Token is invalid') || error.message.includes('token_not_valid')) {
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido ou expirado. Por favor, fa√ßa login novamente.',
        error_code: 'TOKEN_INVALID'
      });
    }
    
    // Verificar se √© erro de conectividade com o servi√ßo de auth
    if (error.message.includes('ECONNREFUSED') || error.message.includes('Network Error')) {
      console.error('‚ùå Servi√ßo de autentica√ß√£o indispon√≠vel');
      return res.status(503).json({
        success: false,
        message: 'Servi√ßo de autentica√ß√£o temporariamente indispon√≠vel',
        error_code: 'AUTH_SERVICE_UNAVAILABLE'
      });
    }
    
    return res.status(401).json({
      success: false,
      message: 'Erro na autentica√ß√£o: ' + error.message,
      error_code: 'AUTH_ERROR'
    });
  }
}

module.exports = authMiddleware;
