// validate-email-routes.js
// Script para validar as rotas de email implementadas

const express = require('express');
const path = require('path');

// Simular carregamento do .env
require('dotenv').config({ path: path.join(__dirname, '.env.development') });

console.log('üîç Validando configura√ß√£o das rotas de email...\n');

// 1. Verificar vari√°veis de ambiente
console.log('üìß Vari√°veis de ambiente:');
console.log('EMAIL_PORTAL:', process.env.EMAIL_PORTAL || '‚ùå N√ÉO CONFIGURADO');
console.log('PW_MAIL_PORTAL:', process.env.PW_MAIL_PORTAL ? '‚úÖ CONFIGURADO' : '‚ùå N√ÉO CONFIGURADO');

// 2. Verificar se os arquivos existem
const fs = require('fs');
const files = [
  './src/routes/relatorioRoutes.js',
  './src/routes/mainRoutes.js',
  './src/services/MailService.js',
  './src/controllers/VagaController.js',
  './src/middlewares/authMiddleware.js'
];

console.log('\nüìÅ Verificando arquivos:');
files.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// 3. Verificar estrutura das rotas
console.log('\nüõ£Ô∏è Verificando estrutura das rotas:');

try {
  const mainRoutes = require('../src/routes/mainRoutes');
  console.log('‚úÖ mainRoutes carregado com sucesso');
  
  const relatorioRoutes = require('./tests/relatorioRoutes');
  console.log('‚úÖ relatorioRoutes carregado com sucesso');
  
  const vagaController = require('../src/controllers/VagaController');
  if (typeof vagaController.enviarRelatorioPorEmail === 'function') {
    console.log('‚úÖ M√©todo enviarRelatorioPorEmail existe no VagaController');
  } else {
    console.log('‚ùå M√©todo enviarRelatorioPorEmail N√ÉO encontrado no VagaController');
  }
  
  const mailService = require('../src/services/MailService');
  if (typeof mailService.SendMailWithCustomSender === 'function') {
    console.log('‚úÖ M√©todo SendMailWithCustomSender existe no MailService');
  } else {
    console.log('‚ùå M√©todo SendMailWithCustomSender N√ÉO encontrado no MailService');
  }
  
} catch (error) {
  console.log('‚ùå Erro ao carregar rotas:', error.message);
}

// 4. Resumo das rotas configuradas
console.log('\nüìã Resumo das rotas configuradas:');
console.log('GET  /api/vagas/relatorio/contratados - Relat√≥rio de contratados');
console.log('GET  /api/vagas/relatorio/periodo - Relat√≥rio de vagas por per√≠odo');
console.log('POST /api/relatorios/enviar-email - Envio de relat√≥rio por email ‚≠ê');

console.log('\n‚úÖ Valida√ß√£o conclu√≠da!');
console.log('\nüí° Para testar a rota completa:');
console.log('   1. Inicie o servidor: npm run dev');
console.log('   2. Use o frontend ou fa√ßa uma requisi√ß√£o POST para:');
console.log('      http://localhost:8000/api/relatorios/enviar-email');
console.log('   3. Inclua o header Authorization: Bearer <token>');
console.log('   4. Payload: { titulo, remetente, destinatarios, corpo, dataInicio, dataFim, tipo }');
